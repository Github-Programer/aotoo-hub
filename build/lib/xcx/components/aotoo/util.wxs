
var templates = [
  'audio',
  'button',
  'camera',
  'canvas',
  'checkbox',
  'icon',
  'image',
  'input',
  'liveplayer',
  'livepusher',
  'map',
  'navigator',
  'progress',
  'radio',
  'richtext',
  'slider',
  'switch',
  'text',
  'textarea',
  'video',
  'view',

  // 不一样的解析模板
  'swiper',
  'form',
  'label',
  'coverview',
  'coverimage'
]

function isString(title){
  return typeof title == 'string'
}

function objTypeof(obj) {
  if (obj) return obj.constructor.toLowerCase()
}

function isObject(obj) {
  return objTypeof(obj) == 'object'
}

function isArray(obj) {
  return objTypeof(obj) == 'array'
}

function isNumber(obj) {
  return objTypeof(obj) == 'number'
}

function isFunction(obj) {
  return objTypeof(obj) == 'function'
}

function delItem(ary, target) {
  const willAry = []
  ary.forEach(item => {
    if (item !== target) {
      willAry.push(item)
    }
  })
  return willAry
}

function sClone(obj) {
  if (obj) {
    return JSON.parse(JSON.stringify(obj))
  }
}

// 简单数组去重，只针对字符串，数字
// function unique(arr) {
//   return arr.reduce((prev, cur) => prev.includes(cur) ? prev : [...prev, cur], []);
// }

function log(what){
  console.log('========= log what')
  console.log(JSON.stringify(what))
}

function equal(item, equalwhat){
  if (item.title ==  equalwhat) {
    console.log(item)
  }
}

function getItemClass(item) {
  // var cItemClass = (item.itemClass || item.class || item.className || 'class-name')
  var cItemClass = (item.itemClass || item.class || item.className)
  return cItemClass ? 'item '+cItemClass : 'item'
}

function getItemStyle(item) {
  var cItemStyle = (item.itemStyle||item.style)
  return cItemStyle ? cItemStyle : ''
}


function existTemp(item, excludeTmp) {
  var tmpName = ''
  var _tmpName
  var noopRet = {
    temp: 'noop',
    data: {}
  }
  for (var ii = 0; ii < templates.length; ii++) {
    var tmp = templates[ii]
    if (item[tmp]) {
      tmpName = tmp
    }
  }

  if ((isString(excludeTmp) && tmpName)) {
    if (tmpName == excludeTmp) return noopRet
  }

  _tmpName = tmpName
  var data = item[tmpName]

  switch (tmpName) {
    case 'label':
      tmpName = 'parse-label'
      data = item
      break;
    case 'form':
      tmpName = 'parse-form'
      data = item
      break;
    case 'swiper':
      tmpName = 'parse-swiper'
      data = item
      break;
  }

  return tmpName ? {
    temp: tmpName,
    data: data
  } : noopRet
}

function customCustom(item, key, attrName) {
  var comp = item[key]
  var compOption = comp && comp.option || {}
  var compChildren = comp && comp.children || []

  if (attrName) {
    return compOption[attrName]
  }
  if (isArray(comp)) {
    return {
      option: compOption,
      children: comp
    }
  }
  if (isObject(comp)) {
    return {
      option: compOption,
      children: compChildren
    }
  }
}

var innerCount = -1
function suid(prefix) {
  innerCount++
  if (typeof prefix == 'string') {
    return prefix + innerCount
  } else {
    return '_' + innerCount
  }
}

function hasEvent(props, key) {
  var keys = ['url', 'tap', 'catchtap', 'longpress', 'catchlongpress', 'touchstart', 'touchend', 'touchmove', 'touchcancel', 'catchtouchstart', 'catchtouchend', 'catchtouchmove', 'catchtouchcancel']
  if (props) {
    if (key == 'tap') {
      return (props.tap || props.catchtap) ? true : false
    }
    else if (key == 'longtap') {
      return (props.longtap || props.catchlongtap) ? true : false
    }
    else if (key == 'longpress') {
      return (props.longpress || props.catchlongpress) ? true : false
    }
    else {
      if (key) {
        return props[key] ? true : false
      } else {
        var state = false
        for (var ii=0; ii<keys.length; ii++) {
          var mykey = keys[ii]
          if (props[mykey]) {
            state = true
            break;
          }
        }
        return state
      }
    }

  }
}

function dataset(item, key) {
  if (item && item.attr && isObject(item.attr)) {
    if (key) {
      if (item.attr[key] || item.attr[key]==0) {
        return true
      }
    } else {
      return item.attr['id'] || item.attr['data-id'] || 0
    }
  } else {
    return ''
  }
}

function dataEvt(item, selects) {
  var evtStr = ''
  if (selects && isArray(selects)) {
    selects.forEach(function(evtName, ii) {
      if (item[evtName]) {
        var val = item[evtName]
        if (isArray(val)) val = val.join(';;')
        if ((ii+1)==selects.length) {
          evtStr += evtName+'='+val
        } else {
          evtStr += evtName+'='+val + ','
        }
      }
    })
  }
  return evtStr
}

function getClass(item, prefix){
  prefix = prefix || 'htitle'
  item = item || {}
  var myClass = prefix
  if (item) {
    var _class = item.class || item.className || item.itemClass
    myClass =  _class ? prefix+' '+_class : prefix
  }
  return myClass
}

function formatQuery(url) {
  let aim = url
  let query={};
  if (url) {
    let urls = url.split('?')
    aim = urls[0]
    if (urls[1]) {
      let params = urls[1].split('&')
      params.forEach(param => {
        let attrs = param.split('=')
        query[attrs[0]] = attrs[1] ? attrs[1] : true
      })
    }
  }
  return {url: aim, query}
}

var storeEvts = {}
function rightEvent(dsetEvt) {
  if (isString(dsetEvt)) {
    const _id = suid('rightEvent_')

    // if (storeEvts[_id]) {
    //   return storeEvts[_id]
    // }

    var rightEvt
    if (dsetEvt.indexOf('?') > -1) {
      var myQuery = {}
      var params = dsetEvt.split('@@')
      var evtType = params[0]
      dsetEvt = params[1]
      var evts = dsetEvt.split(',')
      evts.forEach(function (item) {
        if (item) {
          var its = item.split('=')
          var itName = its.splice(0, 1)
          var itQuery = its.join('=')
          var evtObj = formatQuery(itQuery)
          myQuery[itName] = {
            fun: evtObj.url,
            param: evtObj.query,
          }
        }
      })
      rightEvt = myQuery[evtType]
      rightEvt.allParam = myQuery
    } else {
      dsetEvt = dsetEvt.replace('@@', '?').replace(getRegExp(",", "g"), '&')
      var evtObj = formatQuery(dsetEvt)
      var evtType = evtObj.url
      var evtQuery = evtObj.query
      var evtSelect = evtQuery[evtType]
      var selObj = formatQuery(evtSelect)
      var selFun = selObj.url
      var selParam = selObj.query
      rightEvt = {
        fun: selFun,
        param: selParam,
        allParam: evtQuery
      }
    }
    // storeEvts[_id] = rightEvt
    return rightEvt || {}
  }
}


// slip props

// [20, 'u', 120]
// [20, 'n', 120]
// [20, '<', 120]
// [20, '>', 120]
// [20, '<>', 120]
// [20, 'un', 120]
// [20, 'un<>', 120]
// [0, '@', 0]

// wsad


var touchTimmer
function chooseTouchFun(e, ins) {
  // clearTimeout(touchTimmer)
  var evtType = e.type
  var currentTarget = e.currentTarget
  var dataset = currentTarget.dataset
  var dsetEvt = e.type + '@@' + dataset['evt']
  var tmp = rightEvent(dsetEvt)
  var allParam = tmp.allParam
  if (allParam.__slip) {
     var slip = allParam.__slip.split(';;')
     var slipObj = {
       direction: slip[0],
       min: slip[1],
       max: slip[2],
       find: slip[3]
     }
     e.__query = tmp.param
     switch (evtType) {
       case 'touchstart':
         tStart(e, slipObj, ins)
         break;
       case 'touchmove':
         tMove(e, slipObj, ins)
         break;
       case 'touchend':
         tEnd(e, slipObj, ins)
        //  storeEvts = {}
         break;
       default:
        //  storeEvts = {}
         break;
     }
  } else {
    return true
  }
}

function iMethod(e, ins) {
  var res = chooseTouchFun(e, ins)
  if (res) {
    ins.callMethod('itemMethod', e)
  }
}

function ciMethod(e, ins) {
  var res = chooseTouchFun(e, ins)
  if (res) {
    ins.callMethod('catchItemMethod', e)
  }
}

var tpos = {
  instance: undefined,
  start: { x: 0, y: 0 },
  current: undefined
}

function tStart(e, slip, ins) {
  var currentTarget = e.currentTarget
  var dataset = currentTarget.dataset
  var treeid = dataset.treeid
  var param = e.__query
  var target = e.touches[0] || e.changedTouches[0]
  var pageX = target.pageX
  var pageY = target.pageY

  var cb = param.cb
  var ddd = slip.direction || 'a'
  var min = slip.min || 30
  var max = slip.max || 120
  var find = slip.find || '.move-it'
  // var inst = ins.selectComponent(find)
  var inst = e.instance
  var tmpTarget = tpos.instance
  if (tmpTarget) {
    var tmpSlip = tmpTarget.slip
    var tmpInst = tmpTarget.inst
    var tmpTreeid = tmpTarget.treeid
    // 确定是同一组操作对象，所有slip属性一致
    if (tmpSlip.direction == ddd && tmpSlip.min == min && tmpSlip.max == max && tmpSlip.find == slip.find) {
      // 是否同一个操作实例
      if (treeid && tmpTreeid == treeid) {
      } else {
        tmpInst.setStyle('transform: translateX(0px)')
      }
    }
  }
  tpos = {
    instance: {
      slip,
      inst,
      treeid,
      direction: ddd
    },
    start: {
      x: pageX,
      y: pageY
    },
  }

  if (cb) {
    ins.callMethod(cb, e)
  }
}

/**
 * 'a'  左  <-
 * 's'  下
 * 'd'  右  ->
 * 'w'  上
 * 'ad'  左右
 * 'ws'  上下
 * 'wsad' 上下左右
 * '@'  全方位
 */
function tMove(e, slip, ins) {
  var param = e.__query
  var cb = param.cb
  var ddd = slip.direction || 'a'
  var min = slip.min || 30
  var max = slip.max || 120
  var find = slip.find || '.move-it'
  var absMax = Math.abs(max)
  var absMin = Math.abs(min)

  // var inst = ins.selectComponent(find)
  var inst = e.instance
  var target = e.touches[0] || e.changedTouches[0]
  var pageX = target.pageX
  var pageY = target.pageY
  var startX = tpos.start.x
  var startY = tpos.start.y
  var diffX = pageX - startX
  var diffY = pageY - startY
  var absDiffx = Math.abs(diffX)
  
  if (ddd === 'a') {
    if (diffX < 0) {
      if (absDiffx < absMax) {
        inst.setStyle('transform: translateX(' + diffX + 'px)')
      } else {
        inst.setStyle('transform: translateX(-'+absMax+'px)')
      }
    } else {
      if (absDiffx > absMin) {
        inst.setStyle('transform: translateX(0px)')
      }
    }
  }

  if (ddd === 'd') {
    if (diffX > 0) {
      if (absDiffx < absMax) {
        inst.setStyle('transform: translateX(' + diffX + 'px)')
      } else {
        inst.setStyle('transform: translateX('+absMax+'px)')
      }
    } else {
      if (absDiffx > absMin) {
        inst.setStyle('transform: translateX(0px)')
      }
    }
  }

  if (ddd === 'ad') {
    if (absDiffx < absMax) {
      inst.setStyle('transform: translateX(' + diffX + 'px)')
    } else {
      inst.setStyle('transform: translateX(' + diffX > 0 ? absMax : -(absMax) + 'px)')
    }
    if (absDiffx > absMin) {
      inst.setStyle('transform: translateX(0px)')
    }
  }

  if (cb) {
    ins.callMethod(cb, e)  // 不要执行本对象setData方法，会中断move方法，但可以执行其他对象的渲染方法
  }
}

function tEnd(e, slip, ins) {
  var param = e.__query
  var cb = param.cb
  var ddd = slip.direction || 'a'
  var min = slip.min || 30
  var max = slip.max || 120
  var find = slip.find || '.move-it'
  var absMin = Math.abs(min)
  var absMax = Math.abs(max)

  // var inst = ins.selectComponent(find)
  var inst = e.instance
  var target = e.touches[0] || e.changedTouches[0]
  var pageX = target.pageX
  var pageY = target.pageY
  var startX = tpos.start.x
  var startY = tpos.start.y
  var diffX = pageX - startX
  var diffY = pageY - startY
  var absDiffx = Math.abs(diffX)
  if (ddd === 'a') {
    if (diffX < 0) {
      if (absDiffx < absMin) {
        inst.setStyle('transform: translateX(0px)')
        tpos.current = {
          x: 0,
          y: 0
        }
      } else {
        inst.setStyle('transform: translateX(-' + absMax + 'px)')
      }
    }
  }

  if (ddd === 'd') {
    if (diffX > 0) {
      if (absDiffx < absMin) {
        inst.setStyle('transform: translateX(0px)')
        tpos.current = {
          x: 0,
          y: 0
        }
      } else {
        inst.setStyle('transform: translateX(' + absMax + 'px)')
      }
    }
  }

  if (ddd == 'ad') {
    if (absDiffx < absMin) {
      inst.setStyle('transform: translateX(0px)')
      tpos.current = {
        x: 0,
        y: 0
      }
    } else {
      diffX > 0 ? inst.setStyle('transform: translateX(' + absMax + 'px)') : inst.setStyle('transform: translateX(' + -(absMax) + 'px)')
    }
  }
  
  if (cb) {
    ins.callMethod(cb, e)
  }
}

module.exports = {
  hasEvent,
  dataset,
  dataEvt,
  getClass,

  isString: isString,
  isObject: isObject,
  isArray: isArray,
  log: log,
  isFunction: isFunction,
  isNumber: isNumber,
  sClone: sClone,
  delItem: delItem,

  existTemp: existTemp,
  getItemClass: getItemClass,
  getItemStyle: getItemStyle,

  iMethod,
  ciMethod,
  tStart,
  tMove,
  tEnd
}
